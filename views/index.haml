%h2#tldr Getting Started:

%h4#rvm-install Install RVM and configuration files:

%pre
  :preserve
    # Using curl:
    $ \curl #{RVM_HOST}/install | bash
    # Using wget:
    $ \wget -q -O - #{RVM_HOST}/install | bash

%h4#packages Packages (Optional)

%p
  One of the biggest benefits of RVM over other Ruby environment managers is it's inclusion of source package installs. If you want to help optimize your Ruby install run the following before installing any Rubies:

%pre
  :preserve
    $ rvm pkg install libyaml
    $ rvm pkg install zlib --verify-downloads 1
    $ rvm pkg install readline
    $ rvm pkg install iconv
    $ rvm pkg install libxml2 --verify-downloads 1
    $ rvm pkg install libxslt --verify-downloads 1
    $ rvm pkg install ncurses --verify-downloads 1
    $ rvm pkg install openssl
    # NOTE: OpenSSL will install properly, but then throw an error if it can't download updated CA Certificates

%h4#ruby-install Install Rubies

%p
  With system installed packages only:

%pre
  :preserve
    $ rvm list known
    # Install a Ruby without RVM packages (defaulting to any system installed packages):
    $ rvm install &lt;ruby_version&gt; --verify-downloads 1
    # e.g.: rvm install ruby-2.1.0-p0 --verify-downloads 1

%p
  With RVM installed packages:

%pre
  :preserve
    $ rvm list known
    $ rvm install &lt;ruby_version&gt; --with-opt-dir=${HOME}/.rvm/usr --verify-downloads 1
    # e.g.: rvm install ruby-2.1.0-p0 --with-opt-dir=${HOME}/.rvm/usr --verify-downloads 1

%h2#about About RVM::FW:

%h4#rvm_fw What is RVM::FW (Firewall)?

%p
  RVM::FW is a simple Sinatra application that runs on any rack-enabled server.  It's main purpose is to host Ruby tarballs and library packages to facilitate easily installing Ruby via RVM, rbenv, chruby, etc. in a Intranet environment without Internet access.

%h4#inspiration What inspired RVM::FW?

%p
  Many corporate environments restrict access to the outside web in order to limit the risk of downloading viruses or causing damage throughout the network unintentionally.  A lot of these places require special permission to download and install software. I've worked on contracts in these Enterprise environments, but I still wanted to be able to use the same RVM setup I have at home where I worked and needed it most! In turn I dug around and decided the easiest way to use RVM without outside internet access was modifying RVM's ~/.rvm/user/db file to point to an internal website that had many of the same Ruby versions readily available to install.
